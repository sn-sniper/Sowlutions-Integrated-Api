function isValidBracketSequence(s) {
  if (typeof s !== "string") return "Error: input must be a string.";
  if (s.length === 0) return "Error: empty string.";

  const validChars = new Set(["(", ")", "[", "]", "{", "}"]);
  const bracketPairs = { "(": ")", "[": "]", "{": "}" };
  const stack = [];

  for (let i = 0; i < s.length; i++) {
    const char = s[i];

    // ❌ Reject if invalid character
    if (!validChars.has(char)) {
      return `Error: invalid character '${char}' at position ${i}.`;
    }

    // Push open bracket
    if (bracketPairs[char]) {
      stack.push(char);
    } else {
      // Closing bracket: must match last open
      if (stack.length === 0) return "Error: closing bracket without match.";
      const lastOpen = stack.pop();
      if (bracketPairs[lastOpen] !== char) {
        return `Error: mismatched brackets '${lastOpen}' and '${char}'.`;
      }
    }
  }

  // If anything left open in stack
  if (stack.length > 0) {
    return `Error: unmatched opening bracket '${stack[stack.length - 1]}'.`;
  }

  return true; // ✅ Valid sequence
}
